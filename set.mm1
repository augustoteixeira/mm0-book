-- TODO:
-- * Split file into many:
--   * README.md with phylosophy, reading dependence DAG in mermaid, index, TODO
--   * Individual files with chapters/sections, tactics
--   * Experimentations with mm1
-- * Organize how tactics should be presented
-- * Polish deduction tactics
-- * Try to make i -> d -> c theorem forms more uniform
-- * clean duplicated statements
-- * move mp_dd and syl_d down. Together with conjunction, a section on joining
--   hypotheses. Explain that it is natural to join hypotheses or theses in conjunctions.
--   Then give as an example the double deduction.
-- * conjunction + joining hypotheses
-- * disjunction + case analysis
-- * insert a deduction tactic chapter after disjunction? There is the issue that
--   contracting a single hypotheses did not happen yet. But I don't see it as a big obstacle.
-- * equivalence is a much bigger section. Perhaps ending with a chapter about the substitution
--   tactic.
-- * really do a section on truth tables ending with a tactic? Perhaps it is not as useful.

-- Suggestions for mm1:
-- * Use quotes instead of dolars: "p -> q". look at how Isabelle HOL looks much better
-- * Theorem labels should allow other symbols, like `-`, perhaps `.`.
-- * Should the scripting language be typed? Type driven development helps a lot.
--   In this case, it should guide us in finding which theorems to use, what to match...
-- * Missing variables should be warned, like `(ax_mp a)`.
-- * It is good to have non-complete ordering of precedence, giving error in cases
--   of ambiguity (example $->$ and $<->$ are often a source of bugs).
-- * Missing ; sends error down.
-- * Documentation is scarse. mm1.md is too condensed.
-- * Tactics are too implicit and imperative. Take refine for example. I would much rather
--   pass the goal and metavariables as arguments to refine and have the proof be returned.

-- Questions to Mario:
-- * how to make `(have 'c $a -> b$ 'not-valid)` return an error there instead of later?

-- Book phylosophy
-- * empowering - people reading should feel like they could write it
-- * familiar - notation/statements should mimic what mathematicians are used to.
--   This helps with understanding the material, reduces learning curve, reduces feeling that
--   formal methods are alien, thus improves empowerment.
-- * mnemonic - people should not have to memorize thousands of things like syl6. For this:
--     * Present fewer results (even if future proofs involve more steps).
--     * Rely on familiarity to decide what to introduce (easier to remember familiar things)
--     * Create patterns accross the book (for example, deduction style being always the same)
-- * Good choice of divisions (multiscale: book, chapter, section):
--     * good encapsulation
--     * small surface of interaction
--     * DAG of dependencies
-- * Can be read skipping the tactics code, just learning what they do instead.


delimiter $ ( ) ~ { } $;
strict provable sort wff;

-- annotations look nice, but the proof is again not easy to use
-- do {
--   (def last (match-fn [(a) a] [(_ . l) (last l)]))
--   (def (annotate e s) @ match e [_ (print @ last @ get-decl s)])
-- };

-- # Axioms

term wi (a b: wff): wff;
infixr wi: $->$ prec 25;

term wn (a: wff): wff;
prefix wn: $~$ prec 40;

--| Axiom 1 of Lukasiewicz' axioms for classical propositional logic.
axiom ax_1 (a b: wff): $a -> b -> a$;
--| Axiom 2 of Lukasiewicz' axioms for classical propositional logic.
axiom ax_2 (a b c: wff): $(a -> (b -> c)) -> ((a -> b) -> (a -> c))$;
--| Axiom 3 of Lukasiewicz' axioms for classical propositional logic.
axiom ax_3 (a b: wff): $(~a -> ~b) -> b -> a$;
--| Modus ponens: from `a -> b` and `a`, infer `b`.
axiom ax_mp (a b: wff) (h1: $a$) (h2: $a -> b$): $b$;

--| Expand a proof into a string
do {(def (expand p) (begin (have 'expanded-term p) (pp @ infer-type 'expanded-term)))};
do {
    (def dbg @ match-fn* [(x) (print x) x]
    [(x y) (display @ string-append (->string x) ": " (->string y)) y])
};
-- # Theorem Forms

-- ## Inference Form

-- First proof (! notation)
theorem a1_i (a b: wff) (h: $a$): $b -> a$ = (
  focus
  --(display @ expand '(! ax_mp a $b -> a$ h (! ax_1 a b)))
  '(! ax_mp a $b -> a$ h (! ax_1 a b))
);
-- Unification and proofs without !
theorem _ (a b: wff) (h: $a$): $b -> a$ = '(ax_mp h ax_1);
theorem a2_i (a b: wff) (h: $a -> b -> c$): $(a -> b) -> (a -> c)$ = '(ax_mp h ax_2);
theorem a3_i (a b: wff) (h: $~a -> ~b$): $(b -> a)$ = '(ax_mp h ax_3);

-- ## Deduction Form

theorem mp_d (u a b: wff) (h1: $u -> a$) (h2: $u -> a -> b$): $u -> b$ = '(ax_mp h1 (a2_i h2));
theorem syl (a b: wff) (h1: $a -> b$) (h2: $b -> c$): $a -> c$ = (
  focus
  (have 'c1 $a -> (b -> c)$ '(a1_i h2))
  '(mp_d h1 c1)
);
-- just use syl
theorem a1_d (a b c: wff) (h: $a -> b$): $a -> (c -> b)$ = '(syl h ax_1);
theorem a2_d (u a b c: wff) (h: $u -> (a -> (b -> c))$): $u -> ((a -> b) -> (a -> c))$ = '(syl h ax_2);
theorem a3_d (a b c: wff) (h: $a -> (~b -> ~c)$): $a -> (c -> b)$ = '(syl h ax_3);

-- double deduction
theorem mp_dd (u v a b: wff)
  (h1: $u -> v -> a$) (h2: $u -> v -> a -> b$): $u -> v -> b$ = '(
    mp_d h1 (a2_d h2)
  );
-- syl deduction (recall syl used mp_d already, now we need mp_dd)
theorem syl_d (u a b: wff)
  (h1: $u -> (a -> b)$) (h2: $u -> (b -> c)$): $u -> (a -> c)$ = (
    focus
    (have 'c $u -> a -> b -> c$ '(a1_d h2))
    '(mp_dd h1 c)
);
-- exercise: prove syl_dd

theorem id: $a -> a$ = (
  focus
  (have 'h1 $a -> (a -> a)$ 'ax_1)
  (have 'h2 $a -> ((a -> a) -> a)$ 'ax_1)
  '(mp_d h1 h2)
);

-- # Contradiction

--| contradiction implies anything
theorem contrad_i (a b: wff) (h: $~a$): $a -> b$ = (
  focus
  -- uncommenting display below breaks the proof :(
  -- (display @ expand 'a1i)
  -- (display @ expand '(! a1i $~a$ $~b$ h))
  (have 'c $~b -> ~a$ '(a1_i h))  -- remove h here and see how the error is uninformative
  --(have 'd $a -> b$ '(! a3i b a c))
  --(display @ pp @ local-ctx)
  --(stat)
  --(claim 'c $~b -> ~a$ '(a1i h))  -- remove h here and see how the error is uninformative
  '(a3_i c)
  --(have 'd $a -> b$ '(! a3i b a c))
  --'d
);

--| contradiction deduction
-- just use deduction form everywhere
theorem contrad_d (a b c: wff) (h: $a -> ~b$): $a -> b -> c$ = (
  focus
  (have 'c $a -> (~c -> ~b)$ '(! a1_d $a$ $~b$ $~c$ h))
  '(a3_d c) -- a simpler proof '(a3d (a1d h))
);

--| contradiction deduction form
-- just use deduction form everywhere
theorem _ (a b c: wff) (h: $a -> ~b$): $a -> b -> c$ = (
  focus
  -- it is difficult to use set-goals:
  --(display @ pp @ get-goals)
  --(let ([g (hd @ get-goals)]) (set-goals (ref! @ goal $a -> (~c -> ~b)$) g)) -- (goal $a -> (~c -> ~b)$))
  --(refine '(a1d h))
  --(have 'c $a -> (~c -> ~b)$ '(! a1d $a$ $~b$ $~c$ h))
  (have 'c $a -> (~c -> ~b)$ '(a1_d h))
  '(a3_d c)
  -- a simpler proof: '(a3d (a1d h))
);

--| contradiction closed form
theorem contrad_c (a b: wff): $~a -> a -> b$ = (
  focus
  (have 'c1 $~a -> ~a$ 'id)
  (have 'c2 $~a -> a -> b$ '(contrad_d id)) -- again, remove id here and see the bad error message
  'c2
);

-- # Workout!

--| absorbing redundant antecedent
theorem redun_ant (a b: wff) (h: $a -> a -> b$): $a -> b$ = (
  focus
  (have 'c $a -> a$ 'id)
  '(mp_d c h)
);


-- mirabilis: pm2.18
theorem mirab (a: wff): $(~a -> a) -> a$ = (
  focus
  (have 'c1 $~a -> a -> ~(~a -> a)$ '(! contrad_c $a$ $~(~a -> a)$))
  (have 'c2 $(~a -> a) -> (~a -> ~(~a -> a))$ '(a2_i c1))
  (have 'c3 $(~a -> a) -> (~a -> a) -> a$ '(a3_d c2))
  '(redun_ant c3)
);

-- improve proof
--| elimiation of a nested antecedent
theorem elim_nest_ant (a b c: wff) (h: $(a -> b) -> c$): $~a -> c$ = '(syl contrad_c h);

--| notnotr
theorem notnotr (a: wff): $~~a -> a$ = (
  focus
  (have 'c $(~a -> a) -> a$ '(! mirab $a$))
  '(elim_nest_ant c)
); -- remove the semicolon and the error goes down :(

-- con1i (try using notnotr directly instead of fkn nsyl2)
-- con1d?

-- otherwise go through:
-- mto (perhaps with not phi instead)
-- mt3d

theorem notnot (a: wff): $a -> ~~a$ = (
  focus
  (have 'c $~~~a -> ~a$ 'notnotr)
  '(a3_i c)
);


--| negated implication gives antecedent
theorem not_impl_ant_c (a b: wff): $~(a -> b) -> a$ = (
  focus
  (have 'c1 $~a -> a -> b$ 'contrad_c)
  (have 'c2 $(a -> b) -> ~~(a -> b)$ 'notnot)
  (have 'c3 $~a -> ~~(a -> b)$ '(syl c1 c2))
  '(a3_i c3)
);
-- note that it can be nice to start with closed form, then do i and d.
theorem not_impl_ant_i (a b: wff) (h: $~(a -> b)$): $a$ = '(ax_mp h not_impl_ant_c);
theorem not_impl_ant_d (u a b: wff) (h: $u -> ~(a -> b)$): $u -> a$ = '(mp_d h (a1_i not_impl_ant_c));

--| negated implication negates consequent
theorem not_impl_cons_c (a b: wff): $~(a -> b) -> ~b$ = (
  focus
  (have 'c1 $b -> (a -> b)$ 'ax_1)
  (have 'c2 $~~b -> (a -> b)$ '(syl notnotr c1))
  (have 'c3 $~~b -> ~~(a -> b)$ '(syl c2 notnot))
  '(a3_i c3)
);
theorem not_impl_cons_i (a b: wff) (h: $~(a -> b)$): $~b$ = '(ax_mp h not_impl_cons_c);
theorem not_impl_cons_d (u a b: wff) (h: $u -> ~(a -> b)$): $u -> ~b$ = '(mp_d h (a1_i not_impl_cons_c));

theorem commute_ant_i (a b c: wff) (h: $a -> b -> c$): $b -> a -> c$ = (
  focus
  (have 'c1 $(a -> b) -> (a -> c)$ '(a2_i h))
  (have 'c2 $b -> (a -> b)$ 'ax_1)
  '(syl c2 c1)
);

-- try to prove closed form way above, using deduction form
-- it is difficult because we need h1 /\ h2. But we will
-- move conjuction above
theorem mp_c (a b: wff): $a -> (a -> b) -> b$ = '(
  commute_ant_i (! id $a -> b$)
);



-- # Contraposition

theorem contrap_i (h: $a -> b$): $~b -> ~a$ = (
  focus
  (have 'c1 $~~a -> b$ '(syl notnotr h))
  (have 'c2 $~~a -> ~~b$ '(syl c1 notnot))
  '(a3_i c2)
);
-- look, it is just translation!!!
theorem contrap_d (h: $u -> a -> b$): $u -> ~b -> ~a$ = '(
  a3_d (syl_d (syl_d (a1_i notnotr) h) (a1_i notnot))
);
theorem contrap_c: $(a -> b) -> (~b -> ~a)$ = '(contrap_d id);

theorem contrap_not_cons_i (h: $a -> ~b$): $b -> ~a$ = (
  focus
  (have 'c $~~a -> ~b$ '(syl notnotr h))
  '(a3_i c)
);
-- in order to build deduction from another proof, tautologies get an antecedent through a1i:
theorem contrap_not_cons_d (h: $u -> a -> ~b$): $u -> b -> ~a$ =
  '(a3_d (syl_d (a1_i notnotr) h)
);
-- explain how to obtain closed from deduction
theorem contrap_not_cons_c: $(a -> ~b) -> b -> ~a$ =
  '(contrap_not_cons_d id);

theorem contrap_not_ant_i (h: $~a -> b$): $~b -> a$ = (
  focus
  (have 'c $~a -> ~~b$ '(syl h notnot))
  '(a3_i c)
);
-- in order to build deduction from another proof, tautologies get an antecedent through a1i:
theorem contrap_not_ant_d (h: $u -> ~a -> b$): $u -> ~b -> a$ =
  '(a3_d (syl_d h (a1_i notnot))
);
-- explain how to obtain closed from deduction
theorem contrap_not_ant_c: $(~a -> b) -> ~b -> a$ =
  '(contrap_not_ant_d id);


theorem cases_i (a b: wff) (h1: $a -> b$) (h2: $~a -> b$): $b$ = (
  focus
  (have 'c1 $~b -> ~a$ '(contrap_i h1))
  (have 'c2 $~b -> b$ '(syl c1 h2))
  (have 'c3 $(~b -> b) -> b$ 'mirab)
  '(ax_mp c2 c3)
);
theorem cases_d (u a b: wff)
  (h1: $u -> (a -> b)$) (h2: $u -> (~a -> b)$): $u -> b$ = '(
  mp_d (syl_d (contrap_d h1) h2) (a1_i mirab)
);
-- think if we want to do the closed form now:
-- theorem cases_c (a b: wff): $(a -> b) -> (~a -> b) -> b$ = '();



-- # Conjunction

--| Conjunction: `a` and `b` are both true.
def an (a b: wff): wff = $~(a -> ~b)$;
infixl an: $/\$ prec 34;

theorem conj_impl_l_i (h: $a /\ b$): $a$ = '(not_impl_ant_i h);
theorem conj_impl_l_d (h: $u -> a /\ b$): $u -> a$ = '(not_impl_ant_d h);
theorem conj_impl_l_c: $(a /\ b) -> a$ = 'not_impl_ant_c;

theorem conj_impl_r_c: $(a /\ b) -> b$ = (
  focus
  (have 'c $(a /\ b) -> ~~b$ 'not_impl_cons_c)
  '(syl c notnotr)
);
theorem conj_impl_r_i (h: $a /\ b$): $b$ = '(ax_mp h conj_impl_r_c);
theorem conj_impl_r_d (h: $u -> a /\ b$): $u -> b$ = '(mp_d h (a1_i conj_impl_r_c));


-- build conjunction in closed form
theorem build_conj: $a -> b -> a /\ b$ = (
  focus
  (have 'c $a -> (a -> ~b) -> ~b$ 'mp_c)
  '(contrap_not_cons_d c)
);
theorem build_conj_i
  (h1: $a$) (h2: $b$): $a /\ b$ = (
  focus
  (have 'c $b -> a /\ b$ '(ax_mp h1 build_conj))
  '(ax_mp h2 c)
);

-- confirms intuition that double antecedent acts as conj
theorem repl_two_and_conj (h: $a -> b -> c$): $a /\ b -> c$ = (
  focus
  (have 'c1 $a /\ b -> a$ 'conj_impl_l_c)
  (have 'c2 $a /\ b -> b -> c$ '(syl c1 h))
  (have 'c3 $a /\ b -> b$ 'conj_impl_r_c)
  '(mp_d c3 c2)
);

-- kind of converse of repl_two_and_conj
theorem repl_conj_two_ant (a b c: wff) (h: $a /\ b -> c$): $a -> b -> c$ = (
  focus
  (have 'c1 $a -> b -> a /\ b$ 'build_conj)
  (have 'c2 $a -> a /\ b -> c$ '(a1_i h))
  '(syl_d c1 c2)
);

-- explain how build conjunction can help with double (or triple...) deduction
theorem contrap_dd (h: $u -> v -> a -> ~b$): $u -> v -> b -> ~a$ = (
  focus
  (have 'c1 $u /\ v -> a -> ~b$ '(repl_two_and_conj h))
  (have 'c2 $u /\ v -> b -> ~a$ '(contrap_not_cons_d c1))
  '(repl_conj_two_ant c2)
);

theorem _
  (h1: $a$) (h2: $b$): $a /\ b$ = (
  focus
  (have 'c $b -> a /\ b$ '(ax_mp h1 build_conj))
  '(ax_mp h2 c)
);
theorem _: $a -> b -> a /\ b$ = (
  focus
  (have 'c $a -> (a -> ~b) -> ~b$ 'mp_c)
  '(contrap_not_cons_d c)
);
-- improve the explanation of how to decude this. Probably try to prove _i without _c first
theorem build_conj_d
  (h1: $u -> a$) (h2: $u -> b$): $u -> a /\ b$ = (
    focus
    (have 'c1 $u -> a -> (a -> ~b) -> ~b$ '(a1_i mp_c))
    (have 'c2 $u -> a -> b -> a /\ b$ '(contrap_dd c1)) -- It took me a long time to find out this missing c1
    (have 'c3 $u -> b -> a /\ b$ '(mp_d h1 c2))
    '(mp_d h2 c3)
);

theorem conj_commut_i (h: $a /\ b$): $b /\ a$ = (
  focus
  (have 'c1 $a$ '(conj_impl_l_i h))
  (have 'c2 $b$ '(conj_impl_r_i h))
  '(build_conj_i c2 c1) -- note the inverted order
);
theorem conj_commut_d (u a b: wff) (h: $u -> a /\ b$): $u -> b /\ a$ = '(
  build_conj_d (conj_impl_r_d h) (conj_impl_l_d h)
);
theorem conj_commut_c: $a /\ b -> b /\ a$ = (
  focus
  (have 'c1 $a /\ b -> a$ 'conj_impl_l_c)
  (have 'c2 $a /\ b -> b$ 'conj_impl_r_c)
  '(build_conj_d c2 c1)
);

theorem triple_conj_a (h: $a /\ b /\ c$): $a$ = (
  focus
  (have 'c $a /\ b$ '(conj_impl_l_i h))
  '(conj_impl_l_i c)
);
theorem triple_conj_b (h: $a /\ b /\ c$): $b$ =
  '(conj_impl_r_i (conj_impl_l_i h));
theorem triple_conj_c (h: $a /\ b /\ c$): $c$ =
  '(conj_impl_r_i h);


-- # Disjunction

--| Definition of disjunction (a or b)
def or (a b: wff): wff = $~a -> b$;
infixl or: $\/$ prec 30;

theorem disj_from_l_c: $a -> a \/ b$ = (
  focus
  (have 'c $~~a -> ~a -> b$ 'contrad_c)
  '(syl notnot c)
);
theorem disj_from_l_i (h: $a$): $a \/ b$ = (
  focus
  (have 'c $~~a$ '(ax_mp h notnot))
  '(contrad_i c)
);
theorem disj_from_l_d (h: $u -> a$): $u -> a \/ b$ = (
  focus
  (have 'c $u -> ~~a$ '(mp_d h (a1_i notnot)))
  '(contrad_d c)
);

-- much easier for right:
theorem disj_from_r_c (a b: wff): $b -> a \/ b$ = 'ax_1;
theorem disj_from_r_i (a b: wff) (h: $b$): $a \/ b$ = '(a1_i h);
theorem disj_from_r_d (u a b: wff) (h: $u -> b$): $u -> a \/ b$ = '(a1_d h);

-- now commutation gets easier starting with closed form:
theorem disj_commut_c (a b: wff): $a \/ b -> b \/ a$ = (
  focus
  (have 'qed $(~a -> b) -> ~b -> a$ 'contrap_not_ant_c)
  'qed
);
theorem disj_commut_i (a b: wff) (h: $a \/ b$): $b \/ a$ = '(ax_mp h disj_commut_c);
theorem disj_commut_d (a b: wff) (h: $u -> (a \/ b)$): $u -> (b \/ a)$ = '(mp_d h (a1_i disj_commut_c));

theorem disj_not_l_impl_r_i (a b: wff)
  (h1: $a \/ b$) (h2: $~a$): $b$ = '(ax_mp h2 h1);
theorem disj_not_l_impl_r_d (u a b: wff)
  (h1: $u -> (a \/ b)$) (h2: $u -> ~a$): $u -> b$ = '(mp_d h2 h1);
theorem disj_not_l_impl_r_ci (a b: wff)
  (h: $a \/ b$): $~a -> b$ = '(disj_not_l_impl_r_d (a1_i h) id);

theorem disj_not_r_impl_l_i (a b: wff)
  (h1: $a \/ b$) (h2: $~b$): $a$ = (
    focus
    (have 'c $b \/ a$ '(disj_commut_i h1))
    '(disj_not_l_impl_r_i c h2)
);

-- we may want to split the proof into sub-proofs
-- this can look better than having c1, ..., c9, right?
theorem either_impl_disj_impl_i (a b c: wff)
  (h1: $a -> c$) (h2: $b -> c$): $(a \/ b) -> c$ = (
  focus
  -- we will use cases, first case: a
  (have 'c1 $a -> (a \/ b) -> c$ (
    begin
    (have 's1 $(a \/ b) -> a -> c$ '(a1_i h1))
    '(commute_ant_i s1)))
  -- we will use cases, second case: ~a
  (have 'c2 $~a -> (a \/ b) -> c$ (
    begin
    (have 's2 $~a -> (~a -> b) -> b$ 'mp_c)
    -- encapsulate the two antecedents into a single formula to use sylogism
    (have 's3 $(~a /\ (~a -> b)) -> b$ '(repl_two_and_conj s2))
    (have 's4 $(~a /\ (~a -> b)) -> c$ '(syl s3 h2))
    '(repl_conj_two_ant s4)))
  '(cases_i c1 c2)
);




-- exercise
--theorem eorda (h1: $a /\ b -> d$) (h2: $a /\ c -> d$):
--  $a -> b \/ c -> d$ = '(eord (exp h1) (exp h2));


-- # Truth tables


--| Truth tables
def true (a: wff): wff = $a \/ ~a$;
prefix true: $True$ prec max;
def fal (a: wff): wff = $a /\ ~a$;
prefix fal: $F.$ prec max;

-- TODO this


-- # Equivalence

--| If and only if: `a` implies `b`, and `b` implies `a`.
def iff (a b: wff): wff = $(a -> b) /\ (b -> a)$;
infixl iff: $<->$ prec 20;

-- ## Using equivalences
theorem equiv_impl_l (a b: wff): $(a <-> b) -> a -> b$ = 'conj_impl_l_c;
theorem equiv_impl_r (a b: wff): $(a <-> b) -> b -> a$ = 'conj_impl_r_c;

-- we have already done the hard work when we proved theorems for conjunctions:
theorem equiv_impl_both_c (a b: wff): $(a <-> b) -> (a -> b) /\ (b -> a)$ = '(build_conj_d conj_impl_l_c conj_impl_r_c);
theorem equiv_impl_both_i (a b: wff) (h: $a <-> b$): $(a -> b) /\ (b -> a)$ = '(ax_mp h equiv_impl_both_c);
theorem equiv_impl_both_d (u a b: wff) (h: $u -> (a <-> b)$): $u -> (a -> b) /\ (b -> a)$ = '(mp_d h (a1_i equiv_impl_both_c));

theorem equiv_impl_l_i (a b: wff) (h: $a <-> b$): $a -> b$ = '(ax_mp h equiv_impl_l);
theorem equiv_impl_r_i (a b: wff) (h: $a <-> b$): $b -> a$ = '(ax_mp h equiv_impl_r);

theorem equiv_impl_l_d (u a b: wff) (h: $u -> (a <-> b)$): $u -> (a -> b)$ = '(mp_d h (a1_i equiv_impl_l));
theorem equiv_impl_r_d (u a b: wff) (h: $u -> (a <-> b)$): $u -> (b -> a)$ = '(mp_d h (a1_i equiv_impl_r));

-- ## Building equivalences
theorem build_equiv_i (a b: wff)
  (h1: $a -> b$) (h2: $b -> a$): $a <-> b$ = '(build_conj_i h1 h2);
theorem build_equiv_d (u a b: wff)
  (h1: $u -> (a -> b)$) (h2: $u -> (b -> a)$): $u -> (a <-> b)$ = '(build_conj_d h1 h2);
-- explain what is being done (extract hipotheses one by one)
theorem build_equiv_c (a b: wff): $((a -> b) /\ (b -> a)) -> (a <-> b)$ = (
  let ([x $a -> b$] [y $b -> a$]) (
  focus
  (have 'c1 $,x /\ ,y -> ,x$ 'conj_impl_l_c)
  (have 'c2 $,x /\ ,y -> ,y$ 'conj_impl_r_c)
  '(build_equiv_d c1 c2)
));

-- ## Basic properties
theorem equiv_commut_i (a b: wff) (h: $a <-> b$): $b <-> a$ = '(conj_commut_i h);
theorem equiv_commut_d (u a b: wff) (h: $u -> (a <-> b)$): $u -> (b <-> a)$ = '(conj_commut_d h);
theorem equiv_commut_c (a b: wff): $(a <-> b) -> (b <-> a)$ = '(equiv_commut_d id);

theorem equiv_syl_i (a b c: wff)
  (h1: $a <-> b$) (h2: $b <-> c$): $a <-> c$ = (
  focus
  (have 'c1 $a -> c$ '(syl (equiv_impl_l_i h1) (equiv_impl_l_i h2)))
  (have 'c2 $c -> a$ '(syl (equiv_impl_r_i h2) (equiv_impl_r_i h1)))
  '(build_equiv_i c1 c2)
);


-- MAKE A TACTIC TO DERIVE DEDUCTION form PROOFS!!!!!


-- ## Relations with other operators


-- ### Not

theorem notnot_equiv: $a <-> ~~a$ = '(build_equiv_i notnot notnotr);

theorem repl_equiv_not_i (a b: wff) (h: $a <-> b$): $~a <-> ~b$ = (
  focus
  (have 'c1 $b -> a$ '(equiv_impl_r_i h))
  (have 'c2 $~a -> ~b$ '(contrap_i c1))
  (have 'c3 $a -> b$ '(equiv_impl_l_i h))
  (have 'c4 $~b -> ~a$ '(contrap_i c3))
  '(build_equiv_i c2 c4)
);
-- again, just translate to get deduction!!!
theorem repl_equiv_not_d (u a b: wff) (h: $u -> (a <-> b)$): $u -> (~a <-> ~b)$ = '(
  build_equiv_d (contrap_d (equiv_impl_r_d h)) (contrap_d (equiv_impl_l_d h))
);
theorem repl_equiv_not_c: $ (a <-> b) -> (~a <-> ~b) $ = '(repl_equiv_not_d id);

-- ### Implication

theorem repl_equiv_cons_i (c a b: wff)
  (h1: $a <-> b$) (h2: $c -> a$): $c -> b$ = (
    focus
    (have 'c $a -> b$ '(equiv_impl_l_i h1))
    '(syl h2 c)
); -- was this easier to prove because of inference form?
-- just copy...
theorem repl_equiv_cons_d (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (c -> a)$): $u -> (c -> b)$ = '(
  syl_d h2 (equiv_impl_l_d h1)
);
-- explain extraction of hypotheses
theorem repl_equiv_cons_c (a b c: wff): $((a <-> b) /\ (c -> a)) -> (c -> b)$ = '(
  repl_equiv_cons_d conj_impl_l_c conj_impl_r_c
);


-- explain that one can contract a single hypothesis
theorem repl_equiv_cons_ci (a b c: wff)
  (h: $(a <-> b)$): $(c -> a) -> (c -> b)$ = '(
  ax_mp h (repl_conj_two_ant repl_equiv_cons_c)
);
theorem equiv_cons_equiv_impl_i (a b c: wff) (h: $a <-> b$): $(c -> a) <-> (c -> b)$ = (
  focus
  (have 'c1 $(c -> a) -> (c -> b)$ '(repl_equiv_cons_ci h))
  (have 'c2 $b <-> a$ '(equiv_commut_i h))
  (have 'c3 $(c -> b) -> (c -> a)$ '(repl_equiv_cons_ci c2))
  '(build_equiv_i c1 c3)
);

theorem repl_equiv_ant_i (a b c: wff)
  (h1: $a <-> b$) (h2: $a -> c$): $b -> c$ = (
    focus
    (have 'c $b -> a$ '(equiv_impl_r_i h1))
    '(syl c h2)
);
-- we should always use u for deduction form!!!
theorem repl_equiv_ant_d (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (a -> c)$): $u -> (b -> c)$ = '(
    syl_d (equiv_impl_r_d h1) h2
  );
-- mention hypotheses extraction
theorem repl_equiv_ant_c (a b c: wff): $(a <-> b) /\ (a -> c) -> (b -> c)$ = '(  -- add u in (a b c: wff) and see the weird error elsewhere
  repl_equiv_ant_d conj_impl_l_c conj_impl_r_c
);
-- contract a single hypothesis again
theorem repl_equiv_ant_ci (a b c: wff)
  (h: $(a <-> b)$): $(a -> c) -> (b -> c)$ = '(
  ax_mp h (repl_conj_two_ant repl_equiv_ant_c)
);
theorem equiv_ant_equiv_impl_i (a b c: wff) (h: $a <-> b$): $(a -> c) <-> (b -> c)$ = (
  focus
  (have 'c1 $(a -> c) -> (b -> c)$ '(repl_equiv_ant_ci h))
  (have 'c2 $b <-> a$ '(equiv_commut_i h))
  (have 'c3 $(b -> c) -> (a -> c)$ '(repl_equiv_ant_ci c2))
  '(build_equiv_i c1 c3)
);


--- ### Tactic for deduction?

-- MAKE A TACTIC TO DERIVE DEDUCTION form PROOFS!!!!!



do { (def temp (ref!)) };
do {
  (def (record x)
    (begin
      (set! temp x)
      x)
    )
};

do {
  (def (convert_i_d x)
    (if (not @ string? x) (error "Tried to convert non string")
      (let ([l (string-len x)])
        (if {l <= 2} x
          (let ([prefix (substr 0 {l - 2} x)] [sufix (substr {l - 2} l x)])
            (if (== sufix "_i")
              (string-append prefix "_d")
              (if {x == "syl"} "syl_d" x)
            )
          )
        )
      )
    )
  )
  -- (print @ convert_i_d "asfdx")
  -- (print @ convert_i_d "asfdx_i")
};

do {
  (def (convert_to_deduction x)
    (match x
      [() ()]
      [(h . t) '(,(convert_to_deduction h) . ,(convert_to_deduction t))]
      [a
        (if (atom? x)
          (string->atom @ convert_i_d @ ->string x)
          x)]))
  -- (print @ id2 '())
  -- (print @ id2 'a)
  -- (print @ id2 '(b_i))
  -- (print @ id2 '(c_c d_i))
  -- (print @ id2 '(e (f_i)))
  -- (print @ id2 '((g) h))
};



-- testing tactics
theorem _ (a b c: wff)
  (h1: $a <-> b$) (h2: $a -> c$): $b -> c$ = (record '(
    syl (equiv_impl_r_i h1) h2
  ));
theorem _ (a b c: wff)
  (h1: $a <-> b$) (h2: $a -> c$): $b -> c$ = temp;
theorem _ (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (a -> c)$): $u -> (b -> c)$ = (convert_to_deduction temp);

-- ### Conjunction



theorem conj_commut_equiv_c (a b: wff): $a /\ b <-> b /\ a$ = (
  focus
  (have 'c1 $(a /\ b) -> (b /\ a)$ 'conj_commut_c)
  (have 'c2 $(b /\ a) -> (a /\ b)$ 'conj_commut_c)
  '(build_equiv_i c1 c2)
);

theorem repl_equiv_conj_l_i (a b c: wff)
  (h1: $a <-> b$) (h2: $a /\ c$): $b /\ c$ = (record @
  focus
  (have 'c1 $a$ '(conj_impl_l_i h2))
  (have 'c2 $b$ '(ax_mp c1 (equiv_impl_l_i h1)))
  (have 'c3 $c$ '(conj_impl_r_i h2))
  '(build_conj_i c2 c3)
);
-- by now we should already have a tactic to obtain deductions
theorem repl_equiv_conj_l_d (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (a /\ c)$): $u -> (b /\ c)$ = '(
  build_conj_d (mp_d (conj_impl_l_d h2) (equiv_impl_l_d h1)) (conj_impl_r_d h2)
);
-- this one was a bit complicated with the a1_i
-- the explation is: every hypotheses that is not encapsulated gets an a1_i
theorem repl_equiv_conj_l_ci (a b c: wff)
  (h: $a <-> b$): $(a /\ c) -> (b /\ c)$ = '(
  repl_equiv_conj_l_d (a1_i h) id
);
theorem equiv_l_term_equiv_conj_i (a b c: wff)
  (h: $a <-> b$): $(a /\ c) <-> (b /\ c)$ = (
  focus
  (have 'c1 $(a /\ c) -> (b /\ c)$ '(repl_equiv_conj_l_ci h))
  (have 'c2 $b <-> a$ '(equiv_commut_i h))
  (have 'c3 $(b /\ c) -> (a /\ c)$ '(repl_equiv_conj_l_ci c2))
  '(build_equiv_i c1 c3)
);

-- the left side follows using commutativity only
theorem repl_equiv_conj_r_d (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (c /\ a)$): $u -> (c /\ b)$ = (
  focus
  (have 'c1 $u -> a /\ c$ '(conj_commut_d h2))
  (have 'c2 $u -> b /\ c$ '(repl_equiv_conj_l_d h1 c1))
  '(conj_commut_d c2)
);
theorem repl_equiv_conj_r_ci (a b c: wff)
  (h: $a <-> b$): $(c /\ a) -> (c /\ b)$ = '(
  repl_equiv_conj_r_d (a1_i h) id
);
-- let us also use commutativity to replace the right term using replacement of left:
theorem equiv_r_term_equiv_conj_i (a b c: wff)
  (h: $a <-> b$): $(c /\ a) <-> (c /\ b)$ = (
  focus
  (have 'c1 $(c /\ a) <-> (a /\ c)$ 'conj_commut_equiv_c)
  (have 'c2 $(a /\ c) <-> (b /\ c)$ '(equiv_l_term_equiv_conj_i h))
  (have 'c3 $(c /\ a) <-> (b /\ c)$ '(equiv_syl_i c1 c2))
  (have 'c4 $(b /\ c) <-> (c /\ b)$ 'conj_commut_equiv_c)
  '(equiv_syl_i c3 c4)
);


-- ### Disjunction

theorem disj_commut_equiv_c (a b: wff): $a \/ b <-> b \/ a$ = (
  focus
  (have 'c1 $(a \/ b) -> (b \/ a)$ 'disj_commut_c)
  (have 'c2 $(b \/ a) -> (a \/ b)$ 'disj_commut_c)
  '(build_equiv_i c1 c2)
);

theorem repl_equiv_disj_l_i (a b c: wff)
  (h1: $a <-> b$) (h2: $a \/ c$): $b \/ c$ = (
  focus
  -- consider two cases, a and ~a:
  (have 'c3 $a -> (b \/ c)$
    (begin
      (have 'c1 $a -> b$ '(equiv_impl_l_i h1))
      (have 'c2 $b -> (b \/ c)$ 'disj_from_l_c)
      '(syl c1 c2)))
  (have 'c6 $~a -> (b \/ c)$
    (begin
      (have 'c4 $~a -> c$ '(disj_not_l_impl_r_ci h2))
      (have 'c5 $c -> (b \/ c)$ 'disj_from_r_c)
      '(syl c4 c5)))
  '(cases_i c3 c6)
);
-- NOW WE BADLY NEED THE TACTIC TO BUILD DEDUCTIONS!!!!
theorem repl_equiv_disj_l_d (u a b c: wff)
  (h1: $u -> (a <-> b)$) (h2: $u -> (a \/ c)$): $u -> (b \/ c)$ = _;
theorem repl_equiv_disj_l_c (a b c: wff)
  (h: $a <-> b$): $(a \/ c) -> (b \/ c)$ = '(repl_equiv_disj_l_d (a1_i h) id);

theorem equiv_l_term_equiv_disj_i (a b c: wff)
  (h: $a <-> b$): $(a \/ c) <-> (b \/ c)$ = (
  focus
  (have 'c1 $(a \/ c) -> (b \/ c)$ '(repl_equiv_disj_l_c h))
  (have 'c2 $b <-> a$ '(equiv_commut_i h))
  (have 'c3 $(b \/ c) -> (a \/ c)$ '(repl_equiv_disj_l_c c2))
  '(build_equiv_i c1 c3)
);
-- let us use commutativity to get the right substitution:
theorem equiv_r_term_equiv_disj_i (a b c: wff)
  (h: $a <-> b$): $(c \/ a) <-> (c \/ b)$ = (
    focus
    (have 'c1 $(c \/ a) <-> (a \/ c)$ 'disj_commut_equiv_c)
    (have 'c2 $(a \/ c) <-> (b \/ c)$ '(equiv_l_term_equiv_disj_i h))
    (have 'c3 $(c \/ a) <-> (b \/ c)$ '(equiv_syl_i c1 c2))
    (have 'c4 $(b \/ c) <-> (c \/ b)$ 'disj_commut_equiv_c)
    '(equiv_syl_i c3 c4)
);

-- exercise
-- theorem iand (h1: $a -> b$) (h2: $a -> c$): $a -> b /\ c$ = '(sylc ian h1 h2);







-- add theorem through do-block
-- do {
--   (add-thm!
--     'teste
--     '[(a wff ()) (b wff ())]
--     '([h1 $a -> b$] [h2 $b -> a$])
--     $(a -> b) /\ (b -> a)$
--     ()
--     (fn () '(() (build_conj_i $a -> b$ $b -> a$ h1 h2)))
--   )
--   (print @ get-decl 'teste2)
-- };
do {
  (print (get-decl 'repl_equiv_conj_l_i))
  (add-term! 'a '[(a wff ())] 'wff)
  (add-term! 'b '[(b wff ())] 'wff)
  (add-thm! 'h1 '[(a wff ()) (b wff ())] () '($a -> b$))
  (add-thm! 'h2 '[(a wff ()) (b wff ())] () '($b -> a$))
  (set-goals (goal $a <-> b$))
  (print @ get-goals)
  (print @ expand '(build_conj_i h1 h2))
  (refine '(build_conj_i h1 h2))
  (print @ get-goals)
};



-- do {
--   (def dbg @ match-fn* [(x) (print x) x]
--     [(x y) (display @ string-append (->string x) ": " (->string y)) y])
--   (def last (match-fn [(a) a] [(_ . l) (last l)]))
--   (let ([p (last @ get-decl 'mp_d)])
--     (print (p))
--     )
-- };

-- I don't know how to get the proof from get-decl:
-- do {
--   (def last (match-fn [(a) a] [(_ . l) (last l)]))
--   (add-decl!
--   'theorem 'triple_conj_aa '((a wff ()) (b wff ()) (c wff ())) '((h (an (an a b) c))) 'a '() '(codj_impl_l_i (conj_impl_l_i h)))
--   (print (get-decl 'mp_d))
--   (let ([p (last @ get-decl 'mp_d)])
--     (p))
--     (print @ infer-type p)
--   )
--   (print @ ref! @ last @ get-decl 'mp_d)
-- };
